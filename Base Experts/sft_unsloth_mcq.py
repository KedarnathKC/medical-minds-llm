# -*- coding: utf-8 -*-
"""SFT_Unsloth_MCQ.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JyowGqMFKimStcG-v_s9KqplEM6QaUT6
"""

pip install transformers

import torch
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print(device)

pip install datasets

from datasets import load_dataset
dataset = load_dataset("allenai/ai2_arc", 'ARC-Easy')
train = dataset['train']
test = dataset['test']
validation = dataset['validation']

from datasets import concatenate_datasets
final_dataset = concatenate_datasets([train, test, validation])

import pandas as pd
df = pd.DataFrame(final_dataset)

filtered_rows = df[df['answerKey'] == 'E']
filtered_rows

df = df[df['answerKey'] != 'E']
filtered_rows = df[df['answerKey'] == 'E']
filtered_rows

df.dtypes

def make_into_prompt(row):
  cop = 'Nothing'
  if row['answerKey'] == '1' or row['answerKey'] == 1:
      cop = 'A'
  elif row['answerKey'] == '2' or row['answerKey'] == 2:
      cop = 'B'
  elif row['answerKey'] == '3' or row['answerKey'] == 3:
      cop = 'C'
  elif row['answerKey'] == '4' or row['answerKey'] == 4:
      cop = 'D'
  else:
      cop = row['answerKey']
  choices = row['choices']
  op_a = choices['text'][0] if len(choices['text'])>=1 else 'Nothing'
  op_b = choices['text'][1] if len(choices['text'])>=2 else 'Nothing'
  op_c = choices['text'][2] if len(choices['text'])>=3 else 'Nothing'
  op_d = choices['text'][3] if len(choices['text'])>=4 else 'Nothing'

  question = '{}\nOptions:\nA. {}\nB. {}\nC. {}\nD. {}\n'.format(row['question'], op_a, op_b, op_c, op_d)
  answer = cop
  prompt = f"""
    Question:
    {question}
    [INST] Solve this Multiple Choice Question and provide the correct option out of four options(A,B,C,D) as the answer. [/INST]
    Answer: {answer} </s>"""

  #print('Prompt:',prompt)
  return prompt

df['prompt'] = df.apply(make_into_prompt, axis=1)
df.to_csv('AI2_ARC_MCQA_DATASET_WITH_PROMPTS.csv',index=False)

pip install "unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git"

pip install --no-deps "xformers<0.0.26" trl peft accelerate bitsandbytes

from unsloth import FastLanguageModel
import torch
max_seq_length = 2048 # Choose any! We auto support RoPE Scaling internally!
dtype = None # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
load_in_4bit = True # Use 4bit quantization to reduce memory usage. Can be False.

# 4bit pre quantized models we support for 4x faster downloading + no OOMs.
fourbit_models = [
    "unsloth/mistral-7b-bnb-4bit",
    "unsloth/mistral-7b-instruct-v0.2-bnb-4bit",
    "unsloth/llama-2-7b-bnb-4bit",
    "unsloth/llama-2-13b-bnb-4bit",
    "unsloth/codellama-34b-bnb-4bit",
    "unsloth/tinyllama-bnb-4bit",
    "unsloth/gemma-7b-bnb-4bit", # New Google 6 trillion tokens model 2.5x faster!
    "unsloth/gemma-2b-bnb-4bit",
] # More models at https://huggingface.co/unsloth

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = "unsloth/mistral-7b-instruct-v0.2-bnb-4bit", # Choose ANY! eg teknium/OpenHermes-2.5-Mistral-7B
    max_seq_length = max_seq_length,
    dtype = dtype,
    load_in_4bit = load_in_4bit,
    # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
)

model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                      "gate_proj", "up_proj", "down_proj",],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 3407,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)

import torch

# Check if GPU is available
if torch.cuda.is_available():
    # Set the device to GPU
    device = torch.device("cuda")
    print("GPU is available.")
else:
    # If GPU is not available, fall back to CPU
    device = torch.device("cpu")
    print("GPU is not available. Using CPU.")

model = model.to(device)

from datasets import Dataset
final_dataset = Dataset.from_pandas(df)
final_dataset

from trl import SFTTrainer
from transformers import TrainingArguments

trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = final_dataset,
    dataset_text_field = "prompt",
    max_seq_length = max_seq_length,
    dataset_num_proc = 2,
    packing = False, # Can make training 5x faster for short sequences.
    args = TrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 8,
        warmup_steps = 5,
        #max_steps = None,
        num_train_epochs = 3,# Set num_train_epochs = 1 for full training runs
        learning_rate = 2e-4,
        fp16 = not torch.cuda.is_bf16_supported(),
        bf16 = torch.cuda.is_bf16_supported(),
        logging_steps = 1,
        optim = "adamw_8bit",
        weight_decay = 0.01,
        lr_scheduler_type = "linear",
        seed = 3407,
        output_dir = "answerKey",
    ),
)

trainer_stats = trainer.train()

FastLanguageModel.for_inference(model)
inputs = tokenizer(
[
    "Which is the best football club in the World? A. Liverpool B. Barcelona . Manchester City D. Leverkusen"
], return_tensors = "pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens = 64, use_cache = True)
tokenizer.batch_decode(outputs)

model.save_pretrained('/content/drive/MyDrive/685 Final Project/Models/ai2_arc_instruction_tuned_mistral_7b_1')
tokenizer.save_pretrained("/content/drive/MyDrive/685 Final Project/Models/ai2_arc_instruction_tuned_mistral_7b_1")

from google.colab import drive
drive.mount('/content/drive')

cd /

!zip -r model_mistral_7b_1_mcq.zip '/content/drive/MyDrive/685 Final Project/Models/ai2_arc_instruction_tuned_mistral_7b_1'

!zip -r answerKey.zip /content/answerKey

!zip -r hf_tokenizers_cache.zip /content/huggingface_tokenizers_cache